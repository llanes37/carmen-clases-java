/******************************************************************************************
 *                        üìö **GU√çA COMPLETA: MANEJO DE EXCEPCIONES EN JAVA**
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * Este archivo ofrece una introducci√≥n te√≥rica y pr√°ctica al manejo de excepciones en Java.
 * Incluye ejemplos ejecutables para comprender:
 *    ‚Ä¢ try, catch, finally
 *    ‚Ä¢ throw y throws
 *    ‚Ä¢ Excepciones personalizadas
 *
 * ! IMPORTANTE: Aseg√∫rate de tener instaladas las extensiones "Java Extension Pack" y 
 * "Better Comments" en VS Code para visualizar los comentarios destacados con colores.
 *
 * Autor: Joaqu√≠n
 * Fecha: 28/01/2025
 ******************************************************************************************/

 import java.util.Scanner;

 public class UT2_ManejoExcepciones {
 
     public static void main(String[] args) {
         Scanner scanner = new Scanner(System.in);
         int opcion;
         
         // =====================================================
         // ! üìå MEN√ö PRINCIPAL: DEMOSTRACI√ìN DE EXCEPCIONES
         // =====================================================
         do {
             System.out.println("\n==============================================");
             System.out.println("      MEN√ö DE EJEMPLOS DE EXCEPCIONES         ");
             System.out.println("==============================================");
             System.out.println("1. Ejemplo B√°sico de try-catch");
             System.out.println("2. Ejemplo de finally");
             System.out.println("3. Ejemplo de throw (lanzar excepci√≥n manualmente)");
             System.out.println("4. Ejemplo de throws (declaraci√≥n de m√©todo)");
             System.out.println("5. Ejemplo de Excepci√≥n Personalizada");
             System.out.println("6. Salir");
             System.out.print("üëâ Seleccione una opci√≥n: ");
             opcion = readInt(scanner);
             
             switch (opcion) {
                 case 1:
                     System.out.println("\n--- Ejemplo B√°sico de try-catch ---");
                     ejemploTryCatch();
                     break;
                 case 2:
                     System.out.println("\n--- Ejemplo de finally ---");
                     ejemploFinally();
                     break;
                 case 3:
                     System.out.println("\n--- Ejemplo de throw ---");
                     ejemploThrow();
                     break;
                 case 4:
                     System.out.println("\n--- Ejemplo de throws ---");
                     System.out.print("üëâ Ingrese un divisor para 10/divisor: ");
                     int divisor = readInt(scanner);
                     try {
                         ejemploThrows(divisor);
                     } catch (ArithmeticException e) {
                         System.out.println("‚ùå Excepci√≥n capturada en main: " + e.getMessage());
                     }
                     break;
                 case 5:
                     System.out.println("\n--- Ejemplo de Excepci√≥n Personalizada ---");
                     ejemploExcepcionPersonalizada();
                     break;
                 case 6:
                     System.out.println("üëã Saliendo del programa...");
                     break;
                 default:
                     System.out.println("‚ùå Opci√≥n inv√°lida. Intente nuevamente.");
             }
         } while (opcion != 6);
         
         scanner.close();
     }
 
     // ---------------------------------------------------------------
     // ! M√âTODO: readInt
     // ---------------------------------------------------------------
     // ‚≠ê Lee de forma segura un n√∫mero entero, gestionando entradas no v√°lidas.
     public static int readInt(Scanner scanner) {
         while (true) {
             try {
                 return scanner.nextInt(); // ‚û° Intenta leer un entero
             } catch (Exception e) { // ‚ùå Si la entrada no es v√°lida
                 System.out.println("‚ùå Entrada no v√°lida. Por favor, ingrese un n√∫mero entero.");
                 scanner.next(); // Descarta la entrada incorrecta
             }
         }
     }
 
     // =====================================================
     // ! üìå SECCI√ìN 1: Ejemplo B√°sico de try-catch
     // =====================================================
     /**
      * //! EJEMPLO: try-catch b√°sico
      *
      * ? TEOR√çA:
      * - Se intenta ejecutar una operaci√≥n que puede generar una excepci√≥n.
      * - Si ocurre una excepci√≥n, el control se transfiere al bloque catch.
      *
      * * TAREA PARA EL ALUMNO: Modifica este ejemplo para lanzar una excepci√≥n de otro tipo,
      * como NumberFormatException.
      */
     public static void ejemploTryCatch() {
         try {
             int resultado = 10 / 0; // ! Esto lanza una ArithmeticException
             System.out.println("Resultado: " + resultado);
         } catch (ArithmeticException e) {
             System.out.println("‚ùå Error aitme" );
         }
     }
 
     // =====================================================
     // ! üìå SECCI√ìN 2: Ejemplo de finally
     // =====================================================
     /**
      * //! EJEMPLO: Uso del bloque finally
      *
      * ? TEOR√çA:
      * - El bloque finally se ejecuta siempre, ocurra o no una excepci√≥n.
      * - Es √∫til para liberar recursos o ejecutar c√≥digo de limpieza.
      *
      * * TAREA PARA EL ALUMNO: Agrega una variable que se incremente en el bloque finally
      * y muestra su valor.
      */
     public static void ejemploFinally() {
         try {
             System.out.println("Intentando ejecutar...");
             int resultado = 10 / 0;
             System.out.println("Resultado: " + resultado);
         } catch (ArithmeticException e) {
             System.out.println("‚ùå Error: " + e.getMessage());
         } finally {
             System.out.println("‚úÖ Este mensaje siempre se muestra, independientemente de la excepci√≥n.");
         }
     }
 
     // =====================================================
     // ! üìå SECCI√ìN 3: Ejemplo de throw (lanzar una excepci√≥n manualmente)
     // =====================================================
     /**
      * //! EJEMPLO: Uso de throw para lanzar una excepci√≥n manualmente
      *
      * ? TEOR√çA:
      * - Se utiliza "throw" para lanzar una excepci√≥n de forma manual.
      * - Esto es √∫til cuando se detecta un error espec√≠fico que deseas manejar.
      *
      * * TAREA PARA EL ALUMNO: Cambia la excepci√≥n lanzada a IllegalArgumentException y modifica el mensaje.
      */
     public static void ejemploThrow() {
         try {
             throw new NullPointerException("‚ùå Error: Valor nulo detectado");
         } catch (NullPointerException e) {
             System.out.println("‚úÖ Excepci√≥n capturada: " + e.getMessage());
         }
     }
 
     // =====================================================
     // ! üìå SECCI√ìN 4: Ejemplo de throws (declaraci√≥n de m√©todo)
     // =====================================================
     /**
      * //! EJEMPLO: Uso de throws en la declaraci√≥n de un m√©todo
      *
      * ? TEOR√çA:
      * - "throws" en la firma del m√©todo indica que el m√©todo puede lanzar una excepci√≥n.
      * - Es una forma de delegar el manejo de la excepci√≥n al m√©todo que lo llama.
      *
      * * TAREA PARA EL ALUMNO: Llama a este m√©todo con un divisor distinto de cero y observa el resultado.
      *
      * @param divisor N√∫mero por el cual se va a dividir.
      * @throws ArithmeticException si el divisor es 0.
      */
     public static void ejemploThrows(int divisor) throws ArithmeticException {
         if (divisor == 0) {
             throw new ArithmeticException("‚ùå Divisi√≥n por cero no permitida");
         }
         System.out.println("Resultado de la divisi√≥n: " + (10 / divisor));
     }
 
     // =====================================================
     // ! üìå SECCI√ìN 5: Ejemplo de Excepci√≥n Personalizada
     // =====================================================
     /**
      * //! EJEMPLO: Uso de una excepci√≥n personalizada
      *
      * ? TEOR√çA:
      * - Las excepciones personalizadas permiten definir reglas de error espec√≠ficas.
      * - En este ejemplo, se lanza una excepci√≥n personalizada si la edad es menor de 18.
      *
      * * TAREA PARA EL ALUMNO: Modifica el m√©todo "validarEdad" para que lance una excepci√≥n
      * si la edad es mayor de 100 (por ejemplo, "EdadDemasiadoAltaException").
      */
     public static void ejemploExcepcionPersonalizada() {
         try {
             validarEdad(15); // Intentamos validar una edad inv√°lida
         } catch (EdadInvalidaException e) {
             System.out.println("‚úÖ Excepci√≥n personalizada capturada: " + e.getMessage());
         }
     }
 
     /**
      * * M√©todo que lanza una excepci√≥n personalizada si la edad es menor de 18.
      * @param edad Edad del usuario.
      * @throws EdadInvalidaException si la edad es menor de 18.
      */
     public static void validarEdad(int edad) throws EdadInvalidaException {
         if (edad < 18) {
             throw new EdadInvalidaException("‚ùå Debes ser mayor de 18 a√±os.");
         }
         System.out.println("‚úÖ Edad v√°lida.");
     }
 }
 
 /**
  * ! Clase para una Excepci√≥n Personalizada: EdadInvalidaException
  *
  * ? TEOR√çA:
  * - Se extiende la clase Exception para crear una excepci√≥n personalizada.
  * - Esto permite lanzar errores espec√≠ficos relacionados con la l√≥gica del programa.
  *
  * // TODO: Crea otra excepci√≥n personalizada para validar nombres o alg√∫n otro dato.
  */
 class EdadInvalidaException extends Exception {
     public EdadInvalidaException(String mensaje) {
         super(mensaje);
     }
 }
 
 /*
 ********************************************************************************************
  *                        ‚úçÔ∏è PR√ÅCTICAS RECOMENDADAS PARA EL ALUMNO:
  * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  * 1. Modifica el programa y lanza otras excepciones (por ejemplo, IndexOutOfBoundsException,
  *    NumberFormatException, etc.).
  * 2. Implementa una excepci√≥n personalizada para validar nombres (por ejemplo, que no sean vac√≠os).
  * 3. Crea una clase "CuentaBancaria" y utiliza excepciones para evitar retiros de saldo negativo.
  * 4. Experimenta eliminando bloques catch y observa qu√© sucede en tiempo de ejecuci√≥n.
  ********************************************************************************************/
 